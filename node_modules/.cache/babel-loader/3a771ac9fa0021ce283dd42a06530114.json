{"ast":null,"code":"var _jsxFileName = \"/Users/de1uze/Desktop/task/passreset-front/passwordresetflow-frontend/src/Reset Password/ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { useParams } from \"react-router-dom\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport classes from \"./ResetPassword.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Schema = yup.object().shape({\n  password: yup.string().min(6, \"Password must atleast 6 characters long\").max(15).required(\"Password is required\"),\n  confirmPassword: yup.string().oneOf([yup.ref(\"password\")], \"Passwords does not match\")\n});\n\nfunction ResetPassword() {\n  _s();\n\n  var _errors$password, _errors$passwordConfi;\n\n  const params = useParams();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(Schema)\n  });\n\n  const submitHandler = (data, event) => {\n    event.preventDefault();\n    const password = data.password;\n    const passwordConfirm = data.confirmPassword;\n    const token = params.token;\n    fetch(`https://loginresetflow-backend.herokuapp.com/api/v1/users/resetPassword/${token}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        password,\n        passwordConfirm\n      }),\n      headers: {\n        \"content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return response.json().then(data => {\n          const errorMessage = `${data.message}`;\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      alert(data.status);\n    }).catch(err => alert(err.message));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.title,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(submitHandler),\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          label: \"Password\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          style: {\n            width: 300\n          },\n          type: \"password\",\n          name: \"password\",\n          ...register(\"password\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: [\" \", (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"confirmPassword\",\n          id: \"outlined-basic\",\n          label: \"Confirm Password\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          style: {\n            width: 300\n          },\n          type: \"password\",\n          ...register(\"confirmPassword\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: [\" \", (_errors$passwordConfi = errors.passwordConfirm) === null || _errors$passwordConfi === void 0 ? void 0 : _errors$passwordConfi.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.btn,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPassword, \"801p/mfnjGAXUXDg7+rsm75Kxmc=\", false, function () {\n  return [useParams, useForm];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/Users/de1uze/Desktop/task/passreset-front/passwordresetflow-frontend/src/Reset Password/ResetPassword.js"],"names":["React","useForm","yup","useParams","yupResolver","TextField","Button","classes","Schema","object","shape","password","string","min","max","required","confirmPassword","oneOf","ref","ResetPassword","params","register","handleSubmit","formState","errors","resolver","submitHandler","data","event","preventDefault","passwordConfirm","token","fetch","method","body","JSON","stringify","headers","then","response","ok","json","errorMessage","message","Error","alert","status","catch","err","container","title","form","width","error","btn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { useParams } from \"react-router-dom\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport classes from \"./ResetPassword.module.css\";\n\nconst Schema = yup.object().shape({\n  password: yup\n    .string()\n    .min(6, \"Password must atleast 6 characters long\")\n    .max(15)\n    .required(\"Password is required\"),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\")], \"Passwords does not match\"),\n});\n\nfunction ResetPassword() {\n  const params = useParams();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(Schema) });\n\n  const submitHandler = (data, event) => {\n    event.preventDefault();\n    const password = data.password;\n    const passwordConfirm = data.confirmPassword;\n\n    const token = params.token;\n\n    fetch(\n      `https://loginresetflow-backend.herokuapp.com/api/v1/users/resetPassword/${token}`,\n      {\n        method: \"PATCH\",\n        body: JSON.stringify({ password, passwordConfirm }),\n        headers: {\n          \"content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return response.json().then((data) => {\n            const errorMessage = `${data.message}`;\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        alert(data.status);\n      })\n      .catch((err) => alert(err.message));\n  };\n  return (\n    <div className={classes.container}>\n      <div className={classes.title}>\n        <h3>Reset Password</h3>\n      </div>\n      <form onSubmit={handleSubmit(submitHandler)} className={classes.form}>\n        <div>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Password\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            style={{ width: 300 }}\n            type=\"password\"\n            name=\"password\"\n            {...register(\"password\", {\n              required: true,\n            })}\n          />\n          <p className={classes.error}> {errors.password?.message}</p>\n        </div>\n        <div>\n          <TextField\n            name=\"confirmPassword\"\n            id=\"outlined-basic\"\n            label=\"Confirm Password\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            style={{ width: 300 }}\n            type=\"password\"\n            {...register(\"confirmPassword\", {\n              required: true,\n            })}\n          />\n          <p className={classes.error}> {errors.passwordConfirm?.message}</p>\n        </div>\n        <div className={classes.btn}>\n          <Button variant=\"contained\" type=\"submit\">\n            Reset Password\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}